/**
 * @file RunOfShowDisplay.tsx
 * @description
 * Renders the AI-generated presentation “run of show” for a given GitHub repository.
 * Displays presentation sections, metadata, and controls for expanding, collapsing,
 * and exporting the presentation content.
 *
 * @remarks
 * - Sections can be toggled individually or expanded/collapsed all at once.
 * - Includes repository metadata such as language, stars, audience, duration, and generation date.
 * - Provides an export-to-Markdown function to download the entire run of show.
 * - Displays AI-generated potential Q&A and technical preparation questions.
 * - Includes “New Presentation” button to reset and start over.
 * - Uses Tailwind CSS utility classes for responsive layout and styling.
 * - Accessibility consideration: Interactive controls use semantic HTML and icons include descriptive text.
 */

import { useState } from "react";
import {
  Download,
  RotateCcw,
  Clock,
  Users,
  MessageCircle,
  ChevronDown,
  ChevronRight,
  Star,
  GitFork,
  Calendar,
} from "lucide-react";
import type {
  RunOfShow,
  PresentationConfig,
} from "@/app/page";

interface RunOfShowDisplayProps {
  runOfShow: RunOfShow;
  repoUrl: string;
  config: PresentationConfig;
  metadata?: {
    repoName: string;
    language: string;
    stars: number;
    generatedAt: string;
    config: PresentationConfig;
  } | null;
  onReset: () => void;
}

export function RunOfShowDisplay({
  runOfShow,
  repoUrl,
  config,
  metadata,
  onReset,
}: RunOfShowDisplayProps) {
  const [expandedSections, setExpandedSections] = useState<
    Set<number>
  >(new Set([0]));

  const toggleSection = (index: number) => {
    const newExpanded = new Set(expandedSections);
    if (newExpanded.has(index)) {
      newExpanded.delete(index);
    } else {
      newExpanded.add(index);
    }
    setExpandedSections(newExpanded);
  };

  const expandAllSections = () => {
    setExpandedSections(
      new Set(runOfShow.sections.map((_, index) => index))
    );
  };

  const collapseAllSections = () => {
    setExpandedSections(new Set());
  };

  const exportToMarkdown = () => {
    const timestamp = new Date().toLocaleDateString();
    const repoName = metadata?.repoName || "Repository";

    const markdown = `# ${runOfShow.title}

**Repository**: ${repoUrl}  
**Language**: ${metadata?.language || "Unknown"}  
**Audience**: ${config.audience}  
**Duration**: ${config.timeConstraint}  
**Generated**: ${timestamp}  
${metadata?.stars ? `**Stars**: ${metadata.stars} ⭐` : ""}

## Overview
${runOfShow.overview}

## Presentation Structure

${runOfShow.sections
  .map(
    (section, index) => `
### ${index + 1}. ${section.title} (${section.duration})

${section.content}

**Key Points:**
${section.keyPoints.map((point) => `- ${point}`).join("\n")}

**Presenter Notes:**
${section.presenterNotes
  .map((note) => `- ${note}`)
  .join("\n")}
`
  )
  .join("\n")}

${
  runOfShow.qaPredictions
    ? `
## Potential Q&A
${runOfShow.qaPredictions
  .map((q) => `- **Q:** ${q}`)
  .join("\n")}
`
    : ""
}

${
  runOfShow.techQuestions
    ? `
## Technical Questions to Prepare For
${runOfShow.techQuestions
  .map((q) => `- **Q:** ${q}`)
  .join("\n")}
`
    : ""
}

## Closing Notes
${runOfShow.closingNotes}

---
*Generated by [Repo Presenter](https://.vercel.app) - Transform your repositories into compelling presentations*`;

    const blob = new Blob([markdown], {
      type: "text/markdown",
    });
    const url = URL.createObjectURL(blob);
    const link = document.createElement("a");
    link.href = url;
    link.download = `${runOfShow.title
      .replace(/[^a-z0-9]/gi, "-")
      .toLowerCase()}-runofshow.md`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  };

  const getTotalDuration = () => {
    return runOfShow.sections.reduce((total, section) => {
      const minutes = parseInt(
        section.duration.match(/\d+/)?.[0] || "0"
      );
      return total + minutes;
    }, 0);
  };

  const formatDate = (dateString: string) => {
    try {
      return new Date(dateString).toLocaleDateString(
        "en-US",
        {
          year: "numeric",
          month: "short",
          day: "numeric",
          hour: "2-digit",
          minute: "2-digit",
        }
      );
    } catch {
      return "Recently";
    }
  };

  return (
    <div className="max-w-4xl mx-auto animate-fade-in">
      {/* Header */}
      <div className="card p-6 mb-8">
        <div className="flex items-start justify-between">
          <div className="flex-1">
            <h1 className="text-2xl font-bold text-gray-900 mb-2">
              {runOfShow.title}
            </h1>
            <p className="text-gray-600 mb-4 leading-relaxed">
              {runOfShow.overview}
            </p>

            {/* Meta information */}
            <div className="flex flex-wrap items-center gap-4 text-sm text-gray-500">
              <div className="flex items-center">
                <Users className="h-4 w-4 mr-1" />
                {config.audience}
              </div>
              <div className="flex items-center">
                <Clock className="h-4 w-4 mr-1" />
                {config.timeConstraint}
              </div>

              {metadata?.stars && (
                <div className="flex items-center">
                  <Star className="h-4 w-4 mr-1" />
                  {metadata.stars.toLocaleString()}
                </div>
              )}
              {metadata?.generatedAt && (
                <div className="flex items-center">
                  <Calendar className="h-4 w-4 mr-1" />
                  {formatDate(metadata.generatedAt)}
                </div>
              )}
            </div>
          </div>

          {/* Actions */}
          <div className="flex items-center space-x-3 ml-6">
            <button
              onClick={exportToMarkdown}
              className="btn-secondary flex items-center"
              title="Export as Markdown"
            >
              <Download className="h-4 w-4 mr-2" />
              Export
            </button>
            <button
              onClick={onReset}
              className="btn-primary flex items-center"
              title="Create new presentation"
            >
              <RotateCcw className="h-4 w-4 mr-2" />
              New Presentation
            </button>
          </div>
        </div>
      </div>

      {/* Section Controls */}
      <div className="flex justify-between items-center mb-4">
        <h2 className="text-lg font-semibold text-gray-900">
          Presentation Structure (
          {runOfShow.sections.length} sections)
        </h2>
        <div className="flex space-x-2">
          <button
            onClick={expandAllSections}
            className="text-sm text-primary-600 hover:text-primary-700 px-3 py-1 rounded border border-primary-200 hover:bg-primary-50 transition-colors"
          >
            Expand All
          </button>
          <button
            onClick={collapseAllSections}
            className="text-sm text-gray-600 hover:text-gray-700 px-3 py-1 rounded border border-gray-200 hover:bg-gray-50 transition-colors"
          >
            Collapse All
          </button>
        </div>
      </div>

      {/* Presentation Sections */}
      <div className="space-y-4 mb-8">
        {runOfShow.sections.map((section, index) => {
          const isExpanded = expandedSections.has(index);
          return (
            <div
              key={index}
              className="card animate-slide-up"
              style={{ animationDelay: `${index * 0.1}s` }}
            >
              <button
                onClick={() => toggleSection(index)}
                className="w-full p-6 text-left flex items-center justify-between hover:bg-gray-50 transition-colors rounded-t-lg"
              >
                <div className="flex items-center space-x-4">
                  <div className="flex-shrink-0 w-8 h-8 bg-primary-100 text-primary-600 rounded-full flex items-center justify-center text-sm font-semibold">
                    {index + 1}
                  </div>
                  <div>
                    <h3 className="font-semibold text-gray-900">
                      {section.title}
                    </h3>
                    <p className="text-sm text-gray-500">
                      {section.duration}
                    </p>
                  </div>
                </div>
                {isExpanded ? (
                  <ChevronDown className="h-5 w-5 text-gray-400 transition-transform" />
                ) : (
                  <ChevronRight className="h-5 w-5 text-gray-400 transition-transform" />
                )}
              </button>

              {isExpanded && (
                <div className="px-6 pb-6 border-t border-gray-100 animate-slide-up">
                  <div className="pt-4 space-y-4">
                    {/* Content */}
                    <div>
                      <h4 className="text-sm font-medium text-gray-700 mb-2">
                        Content
                      </h4>
                      <div className="text-gray-600 leading-relaxed whitespace-pre-wrap">
                        {section.content}
                      </div>
                    </div>

                    {/* Key Points */}
                    {section.keyPoints.length > 0 && (
                      <div>
                        <h4 className="text-sm font-medium text-gray-700 mb-2">
                          Key Points
                        </h4>
                        <ul className="space-y-1">
                          {section.keyPoints.map(
                            (point, pointIndex) => (
                              <li
                                key={pointIndex}
                                className="text-gray-600 text-sm flex items-start"
                              >
                                <span className="text-primary-500 mr-2 mt-1">
                                  •
                                </span>
                                <span>{point}</span>
                              </li>
                            )
                          )}
                        </ul>
                      </div>
                    )}

                    {/* Presenter Notes */}
                    {section.presenterNotes.length > 0 && (
                      <div className="bg-yellow-50 p-4 rounded-lg border border-yellow-200">
                        <h4 className="text-sm font-medium text-yellow-800 mb-2 flex items-center">
                          📝 Presenter Notes
                        </h4>
                        <ul className="space-y-2">
                          {section.presenterNotes.map(
                            (note, noteIndex) => (
                              <li
                                key={noteIndex}
                                className="text-yellow-700 text-sm flex items-start"
                              >
                                <span className="text-yellow-500 mr-2 mt-1">
                                  •
                                </span>
                                <span>{note}</span>
                              </li>
                            )
                          )}
                        </ul>
                      </div>
                    )}
                  </div>
                </div>
              )}
            </div>
          );
        })}
      </div>

      {/* Q&A and Additional Notes */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6 animate-slide-up">
        {runOfShow.qaPredictions &&
          runOfShow.qaPredictions.length > 0 && (
            <div className="card p-6">
              <h3 className="font-semibold text-gray-900 mb-4 flex items-center">
                <MessageCircle className="h-5 w-5 mr-2 text-primary-600" />
                Potential Q&A
              </h3>
              <ul className="space-y-3">
                {runOfShow.qaPredictions.map(
                  (question, index) => (
                    <li
                      key={index}
                      className="text-gray-600 text-sm border-l-2 border-primary-200 pl-3"
                    >
                      <span className="text-primary-600 font-medium">
                        Q:
                      </span>{" "}
                      {question}
                    </li>
                  )
                )}
              </ul>
            </div>
          )}

        {runOfShow.techQuestions &&
          runOfShow.techQuestions.length > 0 && (
            <div className="card p-6">
              <h3 className="font-semibold text-gray-900 mb-4 flex items-center">
                🔧 Technical Questions
              </h3>
              <ul className="space-y-3">
                {runOfShow.techQuestions.map(
                  (question, index) => (
                    <li
                      key={index}
                      className="text-gray-600 text-sm border-l-2 border-gray-200 pl-3"
                    >
                      <span className="text-gray-500 font-medium">
                        Q:
                      </span>{" "}
                      {question}
                    </li>
                  )
                )}
              </ul>
            </div>
          )}
      </div>

      {/* Closing Notes */}
      {runOfShow.closingNotes && (
        <div className="card p-6 mt-6 bg-primary-50 border-primary-200 animate-slide-up">
          <h3 className="font-semibold text-primary-900 mb-3 flex items-center">
            🎯 Final Thoughts
          </h3>
          <div className="text-primary-800 leading-relaxed whitespace-pre-wrap">
            {runOfShow.closingNotes}
          </div>
        </div>
      )}

      {/* Repository Link */}
      <div className="mt-8 text-center animate-slide-up">
        <a
          href={repoUrl}
          target="_blank"
          rel="noopener noreferrer"
          className="inline-flex items-center text-sm text-gray-500 hover:text-gray-700 transition-colors"
        >
          <GitFork className="h-4 w-4 mr-1" />
          View Repository
        </a>
      </div>
    </div>
  );
}
